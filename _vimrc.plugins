"===============================================================================
" Plugins {{{1
"===============================================================================

"curl -fLo vimfiles/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
if g:platform == 'win'
    call plug#begin('$VIM/vimfiles/plug/')
else
    call plug#begin('~/.vim/plug/')
endif
" 加大vim-plug的timeout
let g:plug_timeout = 600

" 最近使用的文件列表
Plug 'mru.vim'
" word标记
Plug 'Mark--Karkat'
" cpp自动补全
Plug 'OmniCppComplete'
" visual模式下自动增加数字
Plug 'VisIncr'
" 自己的各类插件
Plug 'szwchao/my-vim-plugins'
" 自己的对第三方插件的扩展
Plug 'szwchao/my-vim-extensions'
" vim中文文档，包含一些插件的翻译文档
Plug 'asins/vimcdoc'
" 状态栏
Plug 'bling/vim-airline'
" 启动画面
Plug 'mhinz/vim-startify'
" 可视化书签
Plug 'MattesGroeger/vim-bookmarks'
" 显示搜索数目
Plug 'google/vim-searchindex'
" 头文件切换
Plug 'derekwyatt/vim-fswitch'
" 标签列表
Plug 'majutsushi/tagbar'
" 快速注释
Plug 'scrooloose/nerdcommenter'
" 文件浏览
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
" 自动补全
Plug 'Shougo/neocomplete.vim'
" 代码模板
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
" 全路径模糊文件, 缓冲区, MRU, 标签, ... 检索。
Plug 'ctrlpvim/ctrlp.vim'
" ctrlp插件，c实现的查找引擎
Plug 'JazzCore/ctrlp-cmatcher', {'do': 'install_windows.bat'}
" 日历插件
Plug 'mattn/calendar-vim'
" jedi python补全
Plug 'davidhalter/jedi-vim', {'for': 'python'}
" python编码规范
Plug 'hynek/vim-python-pep8-indent', {'for': 'python'}
" html,xml的%跳转
Plug 'gregsexton/MatchTag'
" 分隔符补全
Plug 'jiangmiao/auto-pairs'
" git wrapper
Plug 'tpope/vim-fugitive'
" 基于git显示文件的改动
Plug 'airblade/vim-gitgutter'
" 为字符串包围/改变或去除引号/括号或者HTML标签
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
" 自动着色
Plug 'lilydjwg/colorizer'
" 彩色括号
Plug 'luochen1990/rainbow'
" 对齐/格式化文本
Plug 'godlygeek/tabular'
" 缩进线
Plug 'Yggdroot/indentLine'
" 更好的缩进
Plug 'pseewald/vim-anyfold'
" markdown
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
" markdown预览
Plug 'iamcco/markdown-preview.vim', {'for': 'markdown'}
" 供其它plugin使用，避免开小窗口
Plug 'xolox/vim-misc'
Plug 'xolox/vim-shell'

call plug#end()

"===============================================================================
" 插件配置 {{{1
"===============================================================================
if g:computer_enviroment == "grundfos"
    let root_path = "c:/local"
    let temp_dir = "c:/local/temp/"
else
    let root_path = "D:"
    let temp_dir = expand("~") . "//"
endif
let vim_data_path = expand(temp_dir . "vim_data")


"-------------------------------------------------------------------------------
" MyProject {{{2
"-------------------------------------------------------------------------------
" 工程目录
if g:platform == 'win'
    let g:MyProjectConfigDir = root_path . '/Workspace/MyProject'
else
    let g:MyProjectConfigDir = expand('~/MyProject')
endif

"-------------------------------------------------------------------------------
" Calendar {{{2
" ------------------------------------------------------------------------------
let g:calendar_mruler = '一月,二月,三月,四月,五月,六月,七月,八月,九月,十月,十一月,十二月'
let g:calendar_wruler = '日 一 二 三 四 五 六'
let g:calendar_navi_label = '上月,今天,下月'
let g:calendar_monday = 1
let g:calendar_weeknm = 1 " WK01
let g:calendar_datetime = 'title'

"-------------------------------------------------------------------------------
" Mark {{{2
" ------------------------------------------------------------------------------
highlight def MarkWord1  ctermbg=Cyan     ctermfg=Black  guibg=#8CCBEA    guifg=Black
highlight def MarkWord2  ctermbg=Green    ctermfg=Black  guibg=#A4E57E    guifg=Black
highlight def MarkWord3  ctermbg=Yellow   ctermfg=Black  guibg=#D2691E    guifg=Black
highlight def MarkWord4  ctermbg=Red      ctermfg=Black  guibg=#FF7272    guifg=Black
highlight def MarkWord5  ctermbg=Magenta  ctermfg=Black  guibg=#FFB3FF    guifg=Black
highlight def MarkWord6  ctermbg=Blue     ctermfg=Black  guibg=#9999FF    guifg=Black
highlight def MarkWord7  ctermbg=Red      ctermfg=Black  guibg=#BA55D3    guifg=Black

"-------------------------------------------------------------------------------
" startify {{{2
"-------------------------------------------------------------------------------
let g:startify_show_sessions = 1
let g:startify_custom_header = [
            \' ___    __    ___  ______  __    __       ___       ______    __     _______.   ___    ___  __  .___  ___. ',
            \' \  \  /  \  /  / /      ||  |  |  |     /   \     /  __  \  (_ )   /       |   \  \  /  / |  | |   \/   | ',
            \'  \  \/    \/  / |  .----`|  |__|  |    /  ^  \   |  |  |  |  |/   |   (----`    \  \/  /  |  | |  \  /  | ',
            \'   \          /  |  |     |   __   |   /  /_\  \  |  |  |  |        \   \         \    /   |  | |  |\/|  | ',
            \'    \   /\   /   |  `----.|  |  |  |  /  _____  \ |  `--`  |    .----)   |         \  /    |  | |  |  |  | ',
            \'     \_/  \_/     \______||__|  |__| /__/     \__\ \______/     |_______/           \/     |__| |__|  |__| ',
            \'',
            \]

let g:startify_session_dir = vim_data_path . "/session"
" 防止其他插件打开文件后startify仍然存在
autocmd User Startified setlocal buftype=
let g:startify_bookmarks = [{'v': $VIM.'\_vimrc'},
            \]
" 实时更新
let g:startify_update_oldfiles = 1

"-------------------------------------------------------------------------------
" MRU.vim {{{2
"-------------------------------------------------------------------------------
" 最大列表数目200
let MRU_File = expand(vim_data_path . "/_vim_mru_files")
let MRU_Max_Entries = 200
" F4打开最近文件(MRU.vim)
nmap <F4> :MRU<cr>

"-------------------------------------------------------------------------------
" jedi-vim {{{2
" ------------------------------------------------------------------------------
" jedi-vim配置
autocmd FileType python setlocal omnifunc=jedi#completions
" 使用python3
let g:jedi#force_py_version = 3
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_on_dot = 0
let g:jedi#completions_command = "<C-N>"

"-------------------------------------------------------------------------------
" neocomplete {{{2
" ------------------------------------------------------------------------------
let g:neocomplete#data_directory = expand(vim_data_path . '/.neocomplete')
" 使neocomplete自动启动
let g:neocomplete#enable_at_startup = 1
" 使neocomplete自动选择第一个
let g:neocomplete#enable_auto_select = 1
" <C-u>取消选择
imap <expr><M-u>  neocomplete#close_popup()
imap <expr><C-u>  neocomplete#cancel_popup()

let g:neocomplete#sources#omni#functions = {'python': 'jedi#completions', 'dot': 'GraphvizComplete'}

if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
let g:neocomplete#force_omni_input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)\w*'
let g:neocomplete#force_omni_input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
let g:neocomplete#force_omni_input_patterns.javascript = '[^. \t]\.\%(\h\w*\)\?'


" 处于文本模式的文件类型
let g:neocomplete#text_mode_filetypes = {'markdown' : 1, 'gitcommit' : 1, 'text' : 1, }

call neocomplete#custom#source('buffer', 'mark', '[缓冲区]')
call neocomplete#custom#source('dictionary', 'mark', '[字典]')
call neocomplete#custom#source('file', 'mark', '[文件]')
call neocomplete#custom#source('member', 'mark', '[成员]')
call neocomplete#custom#source('omni', 'mark', '[OMNI]')
call neocomplete#custom#source('syntax', 'mark', '[语法]')

"-------------------------------------------------------------------------------
" neosnippet {{{2
" ------------------------------------------------------------------------------
let g:neosnippet#data_directory = expand(vim_data_path . '/.neosnippet')
" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" 自定义的显示所有snippet的快捷键
inoremap <M-a> <C-R>=ListAllSnippets()<CR>

"-------------------------------------------------------------------------------
" TagBar {{{2
"-------------------------------------------------------------------------------
let g:tagbar_sort = 0
let g:tagbar_show_visibility = 1
let g:tagbar_show_linenumbers = 1

"-------------------------------------------------------------------------------
" auto-pairs {{{2
"-------------------------------------------------------------------------------
let AutoPairsCenterLine = 0

"-------------------------------------------------------------------------------
" OmniCppComplete {{{2
" ------------------------------------------------------------------------------
" 命名空间查找控制。0 : 禁止查找命名空间, 1 : 查找当前文件缓冲区内的命名空间(缺省), 2 : 查找当前文件缓冲区和包含文件中的命名空间
let OmniCpp_NamespaceSearch = 1
" 全局查找控制。0:禁止；1:允许(缺省)
let OmniCpp_GlobalScopeSearch = 1
" 是否显示访问控制信息('+', '-', '#')。0/1, 缺省为1(显示)
let OmniCpp_ShowAccess = 1
" 是否是补全提示缩略信息中显示函数原型。0：不显示，1：显示（缺省）
let OmniCpp_ShowPrototypeInAbbr = 1
" 在'.'号后是否自动给出提示信息。0/1, 缺省为1
let OmniCpp_MayCompleteDot = 1
" 在'->'号后是否自动给出提示信息。0/1, 缺省为1
let OmniCpp_MayCompleteArrow = 1
" 在'::'号后是否自动给出提示信息。0/1, 缺省为1
let OmniCpp_MayCompleteScope = 1
" 是否自动选择第一个匹配项。0 : 不选择第一项(缺省) 1 : 选择第一项并插入到光标位置 2 : 选择第一项但不插入光标位置
let OmniCpp_SelectFirstItem = 2
" 默认命名空间列表，项目间使用','隔开。
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]

"-------------------------------------------------------------------------------
" nerdcommenter {{{2
" ------------------------------------------------------------------------------
" 将C语言的注释符号改为//, 默认是/**/
"let NERD_c_alt_style = 1
" 定义Alt+/为注释快捷键
nmap <M-/> ,cc
" 定义Alt+.为取消注释快捷键
nmap <M-.> ,cu
" 定义Alt+,为行后附加注释
nmap <M-,> ,cA

"-------------------------------------------------------------------------------
" rainbow {{{2
" ------------------------------------------------------------------------------
let g:rainbow_active = 1
let g:rainbow_conf = {
            \	'guifgs': ['royalblue3', 'darkorange3', 'MediumPurple', 'firebrick'],
            \	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
            \	'operators': '_,_',
            \	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
            \	'separately': {
            \		'*': {},
            \		'tex': {
            \			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
            \		},
            \		'vim': {
            \			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
            \		},
            \		'html': {
            \			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
            \		},
            \		'css': 0,
            \	}
            \}

"-------------------------------------------------------------------------------
" Vim-Airline {{{2
" ------------------------------------------------------------------------------
" 不自动检测行尾空格
let g:airline#extensions#whitespace#enabled = 0
" 打开上面的smarttab
let g:airline#extensions#tabline#enabled = 1
" smartbar只留文件名和扩展名
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
" 不包含在tabline里的文件
let g:airline#extensions#tabline#excludes = ['__doc__']
" 打开buffer的index
let g:airline#extensions#tabline#buffer_idx_mode = 1
" 关闭wordcount，否则txt，markdown里鼠标不能用
let g:airline#extensions#wordcount#enabled = 0

let g:airline#extensions#hunks#hunk_symbols = ['+', '~', '-']
" 切换buffer快捷键
nmap <M-1> <Plug>AirlineSelectTab1
nmap <M-2> <Plug>AirlineSelectTab2
nmap <M-3> <Plug>AirlineSelectTab3
nmap <M-4> <Plug>AirlineSelectTab4
nmap <M-5> <Plug>AirlineSelectTab5
nmap <M-6> <Plug>AirlineSelectTab6
nmap <M-7> <Plug>AirlineSelectTab7
nmap <M-8> <Plug>AirlineSelectTab8
nmap <M-9> <Plug>AirlineSelectTab9

" 更换主题
let g:airline_theme='mytheme'
" 关闭tagbar，防止每次都调用ctags
let g:airline#extensions#tagbar#enabled = 0
" 语法检查
let g:airline#extensions#syntastic#enabled = 1
" 增强字体
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ' '
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ' '

"-------------------------------------------------------------------------------
" Tabular {{{2
" ------------------------------------------------------------------------------
vmap <Enter> :Tab /

"-------------------------------------------------------------------------------
" ctrlp {{{2
" ------------------------------------------------------------------------------
let g:ctrlp_cache_dir = expand(vim_data_path . '/.ctrlp')
" 修改该选项为1，设置默认为按文件名搜索（否则为全路径）。在提示符面板内可以使用 <c-d> 来切换。
let g:ctrlp_by_filename = 1
" 改变匹配窗口的位置，结果的排列顺序，最小和最大高度:
let g:ctrlp_match_window = 'bottom,order:ttb,results:50'
" 使用该选项来设置自定义的根目录标记作为对默认标记(.hg, .svn, .bzr, and _darcs)的补充。自定义的标记具有优先权:
let g:ctrlp_root_markers = ['.git', 'view.dat', '.svn']
" 设置该选项为1将只显示在当前工作目录内的MRU文件
"let g:ctrlp_mruf_relative = 1
" 扩展
let g:ctrlp_extensions = ['funky', 'cmd', 'branches', 'modified', 'lastcommit']
" 扫描文件的最大数量，设置为0时不进行限制
let g:ctrlp_max_files = 0
" 修改默认快捷键，使其支持Ctrl+v粘贴
let g:ctrlp_prompt_mappings = {
            \ 'AcceptSelection("v")': ['<RightMouse>'],
            \ 'PrtInsert("c")':       ['<MiddleMouse>', '<insert>', '<c-v>'],
            \ }
" 在CtrlP中隐藏的文件和目录
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$|debug$|release$|objs$|cu3x1Platform_TEST$|node_modules$',
            \ 'file': '\v\.(exe|so|dat|dll|bin|hex|doc|docx|ppt|pptx|xls|xlsx|vsd|mdb|lib|o|ncb|pyc|obj|msi|resources|jpg|bmp|png|temp|tmp)$',
            \ }

" 为CtrlP设置一个额外的模糊匹配函数
let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }

nmap <M-d> :CtrlPBuffer<CR>
nmap <M-f> :CtrlPCurFile<CR>
nmap <M-q> :CtrlPQuickfix<CR>
nmap <M-w> :CtrlPCmd<CR>
nmap <M-e> :CtrlPLine<CR>
nmap <M-s> :CtrlPTag<CR>
nmap <M-j> :CtrlPBufTag<CR>
nmap <M-k> :CtrlPChange<CR>
nmap <M-o> :CtrlPMenu<CR>
nmap <M-i> :CtrlPMdImg<CR>

"-------------------------------------------------------------------------------
" vim-markdown {{{2
" ------------------------------------------------------------------------------
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0

"-------------------------------------------------------------------------------
" markdown-preview {{{2
" ------------------------------------------------------------------------------
let g:mkdp_path_to_chrome = "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"

"-------------------------------------------------------------------------------
" vim-gitgutter {{{2
" ------------------------------------------------------------------------------
let g:gitgutter_sign_added = '䁕'
let g:gitgutter_sign_modified = '䁚'
let g:gitgutter_sign_removed = '䁖'
let g:gitgutter_sign_modified_removed = '䁗'
" 关掉async模式，有bug
let g:gitgutter_async = 0

"-------------------------------------------------------------------------------
" vim-bookmarks {{{2
" ------------------------------------------------------------------------------
" 书签符号
let g:bookmark_sign = '䂗'
" 带注释的书签符号
let g:bookmark_annotation_sign = '䃥'
" 高亮书签栏
let g:bookmark_highlight_lines = 1
" 自动保存的文件
let g:bookmark_auto_save_file = vim_data_path . '/vim-bookmarks'

highlight link BookmarkSign             Number
highlight link BookmarkAnnotationSign   Special
highlight link BookmarkLine             BookmarkLineColor
highlight link BookmarkAnnotationLine   BookmarkLineColor

nmap mm <Plug>BookmarkToggle
nmap ma <Plug>BookmarkAnnotate
nmap ms <Plug>BookmarkShowAll
nmap mc <Plug>BookmarkClearAll
nmap <F2> <Plug>BookmarkNext

"-------------------------------------------------------------------------------
" indentLine {{{2
" ------------------------------------------------------------------------------
"let g:indentLine_char = '┊'
let g:indentLine_faster = 1
"let g:indentLine_conceallevel = 0
let g:indentLine_fileTypeExclude = ['json']

"-------------------------------------------------------------------------------
" anyfold {{{2
" ------------------------------------------------------------------------------
let anyfold_activate=1
let anyfold_fold_comments=1

" }}}2
" vim:fdm=marker:fmr={{{,}}} foldlevel=1:
